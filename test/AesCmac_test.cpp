#include <iostream>
#include <gtest/gtest.h>
#include "AesCmac.h"

std::string toString(unsigned char *buf, size_t len=16) {
    size_t maxbytes = len*2 + ((int)len/4) + 1;
    char cstr[maxbytes];
    
    for(int i = 0, j = 0; i < len; i++) {
        if (i > 0 && (i%4) == 0) { 
            std::snprintf(&cstr[j], maxbytes, "%s", " ");
            j += 1;
        }
        std::snprintf(&cstr[j], maxbytes, "%02x", buf[i]);
        j += 2;
    }
    return std::string(cstr);
}

TEST(RFC4493_TestVectors, SubkeyGeneration) {
    unsigned char K[] = {
        0x2b,0x7e,0x15,0x16,
        0x28,0xae,0xd2,0xa6,
        0xab,0xf7,0x15,0x88,
        0x09,0xcf,0x4f,0x3c };

    unsigned char Lexpect[] = {
        0x7d,0xf7,0x6b,0x0c,
        0x1a,0xb8,0x99,0xb3,
        0x3e,0x42,0xf0,0x47,
        0xb9,0x1b,0x54,0x6f };

    unsigned char K1expect[] = {
        0xfb,0xee,0xd6,0x18,
        0x35,0x71,0x33,0x66,
        0x7c,0x85,0xe0,0x8f,
        0x72,0x36,0xa8,0xde };

    unsigned char K2expect[] = {
        0xf7,0xdd,0xac,0x30,
        0x6a,0xe2,0x66,0xcc,
        0xf9,0x0b,0xc1,0x1e,
        0xe4,0x6d,0x51,0x3b };

    AES128 aes128Cipher;
    aes128Cipher.setKey(K, 16);
    
    unsigned char L[16] = {0};
    const unsigned char const_Zero[16] = {0};
    aes128Cipher.encryptBlock(L, const_Zero);

    std::cout << "\nSubkey Generation Test\n";
    std::cout << "--------------------------------------------------\n";
    std::cout << "K              " << toString(K, sizeof(K)) << "\n";
    EXPECT_EQ(toString(L, sizeof(L)), toString(Lexpect, sizeof(Lexpect)));
    std::cout << "AES-128(key,0) " << toString(L, sizeof(L)) << "\n";

    unsigned char K1[16] = {0};
    unsigned char K2[16] = {0};
    AesCmac(K)._generateSubkey(K1, K2);

    EXPECT_EQ(toString(K1, sizeof(K1)), toString(K1expect, sizeof(K1expect)));
    std::cout << "K1             " << toString(K1, sizeof(K1)) << "\n";

    EXPECT_EQ(toString(K2, sizeof(K2)), toString(K2expect, sizeof(K2expect)));
    std::cout << "K2             " << toString(K2, sizeof(K2)) << "\n\n";
}

TEST(RFC4493_TestVectors, AesCmacMsglen0) {
    unsigned char K[] = {
        0x2b,0x7e,0x15,0x16,
        0x28,0xae,0xd2,0xa6,
        0xab,0xf7,0x15,0x88,
        0x09,0xcf,0x4f,0x3c };

    unsigned char M[] = {};
    unsigned char CMACexpect[] = {
        0xbb,0x1d,0x69,0x29,
        0xe9,0x59,0x37,0x28,
        0x7f,0xa3,0x7d,0x12,
        0x9b,0x75,0x67,0x46 };

    std::cout << "\nExample 1: message len = 0 Test\n";
    std::cout << "--------------------------------------------------\n";
    std::cout << "M              <empty string>\n";

    AesCmac aes(K);
    aes.append(M, sizeof(M));
    unsigned char CMAC[16];
    aes.finalize(CMAC);

    EXPECT_EQ(toString(CMAC, sizeof(CMAC)), toString(CMACexpect, sizeof(CMACexpect)));
    std::cout << "AES-CMAC       " << toString(CMAC, sizeof(CMAC)) << "\n\n";
}

TEST(RFC4493_TestVectors, AesCmacMsglen16) {
    unsigned char K[] = {
        0x2b,0x7e,0x15,0x16,
        0x28,0xae,0xd2,0xa6,
        0xab,0xf7,0x15,0x88,
        0x09,0xcf,0x4f,0x3c };

    unsigned char M[] = {
        0x6b,0xc1,0xbe,0xe2,
        0x2e,0x40,0x9f,0x96,
        0xe9,0x3d,0x7e,0x11,
        0x73,0x93,0x17,0x2a };

    unsigned char CMACexpect[] = {
        0x07,0x0a,0x16,0xb4,
        0x6b,0x4d,0x41,0x44,
        0xf7,0x9b,0xdd,0x9d,
        0xd0,0x4a,0x28,0x7c };

    std::cout << "\nExample 2: message len = 16 Test\n";
    std::cout << "--------------------------------------------------\n";
    std::cout << "M              " << toString(M, sizeof(M)) << "\n";

    AesCmac aes(K);
    aes.append(M, sizeof(M));
    unsigned char CMAC[16];
    aes.finalize(CMAC);

    EXPECT_EQ(toString(CMAC, sizeof(CMAC)), toString(CMACexpect, sizeof(CMACexpect)));
    std::cout << "AES-CMAC       " << toString(CMAC, sizeof(CMAC)) << "\n\n";
}

TEST(RFC4493_TestVectors, AesCmacMsglen40) {
    unsigned char K[] = {
        0x2b,0x7e,0x15,0x16,
        0x28,0xae,0xd2,0xa6,
        0xab,0xf7,0x15,0x88,
        0x09,0xcf,0x4f,0x3c };

    unsigned char M[] = {
        0x6b,0xc1,0xbe,0xe2,
        0x2e,0x40,0x9f,0x96,
        0xe9,0x3d,0x7e,0x11,
        0x73,0x93,0x17,0x2a,
        0xae,0x2d,0x8a,0x57,
        0x1e,0x03,0xac,0x9c,
        0x9e,0xb7,0x6f,0xac,
        0x45,0xaf,0x8e,0x51,
        0x30,0xc8,0x1c,0x46,
        0xa3,0x5c,0xe4,0x11 };

    unsigned char CMACexpect[] = {
        0xdf,0xa6,0x67,0x47,
        0xde,0x9a,0xe6,0x30,
        0x30,0xca,0x32,0x61,
        0x14,0x97,0xc8,0x27 };

    std::cout << "\nExample 3: message len = 40 Test\n";
    std::cout << "--------------------------------------------------\n";
    std::cout << "M              " << toString(M, sizeof(M)) << "\n";

    AesCmac aes(K);
    aes.append(M, sizeof(M));
    unsigned char CMAC[16];
    aes.finalize(CMAC);

    EXPECT_EQ(toString(CMAC, sizeof(CMAC)), toString(CMACexpect, sizeof(CMACexpect)));
    std::cout << "AES-CMAC       " << toString(CMAC, sizeof(CMAC)) << "\n\n";
}

TEST(RFC4493_TestVectors, AesCmacMsglen64) {
    unsigned char K[] = {
        0x2b,0x7e,0x15,0x16,
        0x28,0xae,0xd2,0xa6,
        0xab,0xf7,0x15,0x88,
        0x09,0xcf,0x4f,0x3c };

    unsigned char M[] = {
        0x6b,0xc1,0xbe,0xe2,
        0x2e,0x40,0x9f,0x96,
        0xe9,0x3d,0x7e,0x11,
        0x73,0x93,0x17,0x2a,
        0xae,0x2d,0x8a,0x57,
        0x1e,0x03,0xac,0x9c,
        0x9e,0xb7,0x6f,0xac,
        0x45,0xaf,0x8e,0x51,
        0x30,0xc8,0x1c,0x46,
        0xa3,0x5c,0xe4,0x11,
        0xe5,0xfb,0xc1,0x19,
        0x1a,0x0a,0x52,0xef,
        0xf6,0x9f,0x24,0x45,
        0xdf,0x4f,0x9b,0x17,
        0xad,0x2b,0x41,0x7b,
        0xe6,0x6c,0x37,0x10 };

    unsigned char CMACexpect[] = {
        0x51,0xf0,0xbe,0xbf,
        0x7e,0x3b,0x9d,0x92,
        0xfc,0x49,0x74,0x17,
        0x79,0x36,0x3c,0xfe };

    std::cout << "\nExample 4: message len = 64 Test\n";
    std::cout << "--------------------------------------------------\n";
    std::cout << "M              " << toString(M, sizeof(M)) << "\n";

    AesCmac aes(K);
    aes.append(M, sizeof(M));
    unsigned char CMAC[16];
    aes.finalize(CMAC);

    EXPECT_EQ(toString(CMAC, sizeof(CMAC)), toString(CMACexpect, sizeof(CMACexpect)));
    std::cout << "AES-CMAC       " << toString(CMAC, sizeof(CMAC)) << "\n\n";
}

TEST(ChirpstackTests, MultiAppendReset) {
    unsigned char key0[] = { 0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2 };
    unsigned char message0[] = { 0x49,0x0,0x0,0x0,0x0,0x0,0x4,0x3,0x2,0x1,0x1,0x0,0x0,0x0,0x0,0xe,0x40,0x4,0x3,0x2,0x1,0x80,0x1,0x0,0x1,0xa6,0x94,0x64,0x26,0x15 };
    unsigned char gocmac0[] = { 0xd6,0xc3,0xb5,0x82,0xd9,0xf9,0x5,0x3d,0x33,0xd4,0xb7,0x47,0xb2,0x50,0x10,0xf5 };
    unsigned char cmac0[16];

    std::cout << "\nExample 5: Chirpstack Test 1\n";
    std::cout << "--------------------------------------------------\n";
    std::cout << "key0           " << toString(key0, sizeof(key0)) << "\n";
    std::cout << "message0       " << toString(message0, sizeof(message0)) << "\n";

    AesCmac aes(key0);
    aes.append(message0, sizeof(message0));
    aes.finalize(cmac0);

    EXPECT_EQ(toString(cmac0, sizeof(cmac0)), toString(gocmac0, sizeof(gocmac0)));
    std::cout << "cmac0          " << toString(cmac0, sizeof(cmac0)) << "\n\n";

    unsigned char key1[] = { 0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1 };
    unsigned char message1[] = { 0x49,0x0,0x0,0x0,0x0,0x0,0x4,0x3,0x2,0x1,0x0,0x0,0x0,0x0,0x0,0x10,0x40,0x4,0x3,0x2,0x1,0x3,0x0,0x0,0x2,0x3,0x5,0x1,0x6a,0x37,0x98,0xf5 };
    unsigned char gocmac1[] = { 0xb6,0x4d,0xc0,0x39,0x4e,0x4d,0xf2,0x5b,0xd2,0xe1,0x19,0x3f,0xf4,0x35,0x8f,0x3 };
    unsigned char cmac1[16];

    std::cout << "\nExample 6: Chirpstack Test 2\n";
    std::cout << "--------------------------------------------------\n";
    std::cout << "key1           " << toString(key1, sizeof(key1)) << "\n";
    std::cout << "message1       " << toString(message1, sizeof(message1)) << "\n";

    AesCmac aes1(key1);
    aes1.append(message1, sizeof(message1));
    aes1.finalize(cmac1);

    EXPECT_EQ(toString(cmac1, sizeof(cmac1)), toString(gocmac1, sizeof(gocmac1)));
    std::cout << "cmac1          " << toString(cmac1, sizeof(cmac1)) << "\n\n";

    unsigned char message2_p1[] = { 0x49,0x0,0x0,0x0,0x0,0x0,0x4,0x3,0x2,0x1,0x0,0x0,0x0,0x0,0x0,0xc };
    unsigned char message2_p2[] = { 0x40,0x4,0x3,0x2,0x1,0x0,0x0,0x0,0x0,0x69,0x36,0x9e };
    unsigned char gocmac2[] = { 0xee,0x6a,0xa5,0x8,0xc3,0x83,0x8b,0x8b,0x75,0x61,0x72,0x77,0xdb,0x8a,0x3f,0xb7 };
    unsigned char cmac2[16];

    std::cout << "\nExample 7: Chirpstack Test 3\n";
    std::cout << "--------------------------------------------------\n";
    std::cout << "message2_p1    " << toString(message2_p1, sizeof(message2_p1)) << "\n";
    std::cout << "message2_p2    " << toString(message2_p2, sizeof(message2_p2)) << "\n";

    aes1.reset();
    aes1.append(message2_p1, sizeof(message2_p1));
    aes1.append(message2_p2, sizeof(message2_p2));
    aes1.finalize(cmac2);

    EXPECT_EQ(toString(cmac2, sizeof(cmac2)), toString(gocmac2, sizeof(gocmac2)));
    std::cout << "cmac2          " << toString(cmac2, sizeof(cmac2)) << "\n\n";
}
